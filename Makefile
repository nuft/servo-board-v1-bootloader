#
# settings
################################################################################


PROJNAME = f3-bootloader

# dont show compiler calls
QUIET = 1

#
# low level settings
################################################################################

include include.mk

# libraries & includes
INCDIR   += -I./libopencm3/include
LIBS     += -lc -lnosys
LIBS     += -L./libopencm3/lib
LIBS     += -lopencm3_stm32f3

LDSCRIPT = ./linkerscript.ld

# defines
DEFS += -DSTM32F3 -DSTM32F3 -DCPU_CFG_CPU_CORE_FREQ=64000000

# Cortex-M4f
CFLAGS   += -mthumb -mcpu=cortex-m4 -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16
LFLAGS   += -mthumb -mcpu=cortex-m4 -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16

# C & C++ compiler flags
CFLAGS   += -fno-common -ffunction-sections -fdata-sections
CFLAGS   += $(OPTIMIZATION) -g  -Wall -Wextra -Wno-unused-parameter
CFLAGS   += $(DEFS) $(INCDIR) -fomit-frame-pointer -MD
# C only flags
CCFLAGS  += -Wstrict-prototypes
# C++ only flags
CPPFLAGS += -fno-rtti -fno-exceptions -fno-unwind-tables
CPPFLAGS += -fno-use-cxa-atexit
# Linker flags
LFLAGS   += $(LIBS) -T$(LDSCRIPT) -nostartfiles -Wl,-Map=$(PROJNAME).map
LFLAGS   += -Wl,--gc-sections

CCFLAGS  += $(CFLAGS)
CPPFLAGS += $(CFLAGS)
ASMFLAGS += $(CFLAGS)

# gcc optimization level
OPTIMIZATION    = -Os

CC  = arm-none-eabi-gcc
CPP = arm-none-eabi-g++
AS  = arm-none-eabi-gcc -x assembler-with-cpp
LD  = arm-none-eabi-g++
AR  = arm-none-eabi-ar
OC  = arm-none-eabi-objcopy
OD  = arm-none-eabi-objdump
NM  = arm-none-eabi-nm
SZ  = arm-none-eabi-size

OBJS = $(CSRC:.c=.o) $(ASMSRC:.s=.o) $(CXXSRC:.cpp=.o)

COLOR = \033[1;31m
COLOR_CLEAR = \033[0m
PRINT = @printf "$(COLOR)%s$(COLOR_CLEAR)\n"

ifeq ($(QUIET),1)
Q = @
endif

#
# targets:
################################################################################

.PHONY: all
all: $(PROJNAME).bin $(PROJNAME).lst $(PROJNAME).size.txt Makefile
	$(PRINT) "> done: $(PROJNAME)"
	@ $(SZ) $(PROJNAME).elf

.PHONY: clean
clean:
	$(Q)-rm -f $(OBJS)
	$(Q)-rm -f $(OBJS:.o=.lst)
	$(Q)-rm -f $(OBJS:.o=.d)
	$(Q)-rm -f $(PROJNAME).elf
	$(Q)-rm -f $(PROJNAME).bin
	$(Q)-rm -f $(PROJNAME).lst
	$(Q)-rm -f $(PROJNAME).map
	$(Q)-rm -f $(PROJNAME).size.txt

.PHONY: rebuild
rebuild: clean all

-include tools.mk

#
# file targets:
################################################################################

# binary
$(PROJNAME).bin: $(PROJNAME).elf
	$(PRINT) "> copying"
	$(Q) $(OC) -Obinary -j .text -j .rodata -j .data $(PROJNAME).elf $(PROJNAME).bin

# assembly listing
$(PROJNAME).lst: $(PROJNAME).elf
	$(PRINT) "> generating assembly listing"
	$(Q) $(OD) -D -h $(PROJNAME).elf > $(PROJNAME).lst

# linked elf-object
$(PROJNAME).elf: $(OBJS) $(LDSCRIPT)
	$(PRINT) "> linking"
	$(Q) $(LD) -o $(PROJNAME).elf $(OBJS) $(LFLAGS)

# object from c
%.o: %.c Makefile
	$(PRINT) "> compiling ("$<")"
	$(Q) $(CC) $(CCFLAGS) -Wa,-ahlms=$(<:.c=.lst) -o ${@} -c ${<}

%.o: %.s Makefile
	$(PRINT) "> assembling ("$<")"
	$(Q) $(AS) $(ASMFLAGS) -c ${<} -o ${@}

# object from c++
%.o: %.cpp Makefile
	$(PRINT) "> compiling ("$<")"
	$(Q) $(CPP) $(CPPFLAGS) -Wa,-ahlms=$(<:.cpp=.lst) -o ${@} -c ${<}

# space usage
$(PROJNAME).size.txt: $(PROJNAME).elf
	$(PRINT) "> calculating space usage"
	$(Q)$(SZ) $(PROJNAME).elf > $(PROJNAME).size.txt
	$(Q)$(NM) --size-sort --print-size -S $(PROJNAME).elf >> $(PROJNAME).size.txt

# include the dependencies for all objects
# (generated by the -MD compiler-flag)
# -include $(OBJS:.o=.d)
